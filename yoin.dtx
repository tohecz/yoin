% \iffalse meta-comment
%!TeX program = T_do_dtx
% 
% This part is not going to appear anywhere so is good for 'header'
% information.
%
%% These lines, starting with two "%", will be extracted so can be used
%% to copy some kind of header into target (.sty) files: the team .dtx
%% use this to dump the copyright header from the meta-comment block into
%% the output.
%
%<*driver>
\documentclass{l3doc}

\usepackage[vmargin=1in,hmargin={2in,1in},a4paper,landscape]{geometry}
\usepackage{lmodern,anttor}
\usepackage{xcolor}

\newcommand\T[1]{{\let\\\textbackslash\texttt{#1}}}
\newcommand\p[1]{\texttt{\##1}}

\DisableCrossrefs
\CodelineNumbered
\def\theCodelineNo{{\color{black}\normalfont\fontseries{sb}\selectfont\footnotesize\arabic{CodelineNo}}}
\def\MacroFont{\ttfamily\color{blue}}

% Whatever packages here
%
% Might include
% \usepackage{\jobname}
%
% Very handy is
% \usepackage[numbered]{hypdoc} % hyperref for l3doc
%
% You might want the following
%\EnableCrossrefs
%\CodelineIndex
%\RecordChanges
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% ^^A Comments in the documentation part start ^^A
%
% ^^A If you use the extracted package itself you can do
% \GetFileInfo{\jobname.sty}
% ^^A and define \filedate, etc.
%
% ^^A Meta data for the package
% \title{\pkg{mypkg}\thanks{^^A
%   This file describes version \fileversion, last revised \filedate.^^A
% }}
% \author{^^A
%   Tom Hejda\thanks{E-mail: tohecz@gmail.com}^^A
% }
% \date{Released \filedate}
%
% \section{User documentation}
%
% User documentation would appear here.
%
% ^^A This will appear at the end of the PDF, which might or might not include
% ^^A the typeset code
% \StopEventually{^^A
%   \PrintChanges
%   \PrintIndex
% }
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{Package header}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% We load the required packages needed for \LaTeX3, and the package header.
%
% \begin{macrocode}
%<*package>
\RequirePackage{expl3,l3keys2e,xparse}
\ProvidesExplPackage{yoin}{2016/02/28}{v0.0.1}{Joining articles into issues}
%    \end{macrocode}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{General macros}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%    \begin{macro}{\yoin_seq_gappend_clist:Nn}
%    Globally append \T{clist} \p2 to \T{seq} \p1.
%    \begin{macrocode}
\cs_new_protected:Nn \yoin_seq_gappend_clist:Nn {
	\seq_set_from_clist:Nn \l__yoin_tmpa_seq { #1 }
	\seq_gconcat:NNN #1 #1 \l__yoin_tmpa_seq
}
%    \end{macrocode}
%    \end{macro}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{Key--value interface for the package setup}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% First, we define the variables to store the keys.
%    \begin{macrocode}
\bool_new:N \g_yoin_subprocess_bool
\bool_new:N \g_yoin_dryrun_bool
\bool_new:N \g_yoin_onlyflags_bool
\bool_new:N \g_yoin_onlytags_bool
%    \end{macrocode}
%    \begin{macrocode}
\seq_new:N \g_yoin_flags_seq
\seq_new:N \g_yoin_tags_seq
\seq_new:N \g_yoin_onlyflags_seq
\seq_new:N \g_yoin_onlytags_seq
%    \end{macrocode}
%    \begin{macrocode}
\msg_new:nnnn { yoin } { unknown-flag }
	{ The flag `#1' is unknown to `yoin'. }
	{ You either misspelled it or forgot to declare it. }
%    \end{macrocode}
%    \begin{macrocode}
\msg_new:nnnn { yoin } { unknown-tag }
	{ The tag `#1' is unknown to `yoin'. }
	{ You either misspelled it or forgot to declare it. }
%    \end{macrocode}
% The keys themselves:
%    \begin{macrocode}
\keys_define:nn { yoin / general } {
%    \end{macrocode}
% Booleans:
%    \begin{macrocode}
	dryrun .bool_gset:N = \g_yoin_dryrun_bool,
	dryrun .initial:n = { false },
%    \end{macrocode}
%    \begin{macrocode}
	subprocess .bool_gset:N = \g_yoin_subprocess_bool,
	subprocess .initial:n = { false },
%    \end{macrocode}
% Keys whose \T{clist} values are appended to a \T{seq}:
%    \begin{macrocode}
	defineflags .code:n = \yoin_seq_gappend_clist:Nn \g_yoin_flags_seq { #1 },
%    \end{macrocode}
%    \begin{macrocode}
	definetags .code:n = \yoin_seq_gappend_clist:Nn \g_yoin_tags_seq { #1 },
%    \end{macrocode}
% A \T{clist} key is stored in a \T{seq}, also, a corresponding \T{bool} is set true:
%    \begin{macrocode}
	onlyflags .code:n =
		\seq_gset_from_clist:Nn \g_yoin_onlyflags_seq { #1 }
		\bool_gset_true:N \g_yoin_onlyflags_bool
		,
%    \end{macrocode}
%    \begin{macrocode}
	onlytags .code:n =
		\seq_gset_from_clist:Nn \g_yoin_onlytags_seq { #1 }
		\bool_gset_true:N \g_yoin_onlytags_bool
		,
%    \end{macrocode}
%    \begin{macrocode}
}
%    \end{macrocode}
%
% Process key options given to the package.
% We \emph{do not want to process any options given to the class}.
% Whence \T{\\ProcessKeysPackageOptions} and not \T{\\ProcessKeysOptions}.
%    \begin{macrocode}
\ProcessKeysPackageOptions { ctuthesis }
%    \end{macrocode}
%
% Allow keys to be set later. We define both a \LaTeX3 interface and an xparse UI wrapper.
%    \begin{macrocode}
\cs_new_protected:Nn \yoin_setup:n {
	\keys_set:nn { yoin / general } { #1 }
}
%    \end{macrocode}
%    \begin{macrocode}
\NewDocummentCommand \yoinSetup { R[]{} } {
	\yoin_setup:n { #1 }
}
%    \end{macrocode}
%
%    \begin{macrocode}
\keys_define:nn { yoin / yoinshell } {
%    \end{macrocode}
%    \begin{macrocode}
	flag .code:n =
		\seq_if_in:NnF \g_yoin_flags_seq { #1 } { \msg_error:nnn { yoin } { unknown-flag } { #1 } }
		\bool_if:NT \g_yoin_onlyflags_bool {
			\seq_if_in:NnF \g_yoin_onlyflags_seq { #1 } {
				\keys_set:nn { yoin / yoinshell } {
					ignore = true
				}
			}
		}
		,
%    \end{macrocode}
%    \begin{macrocode}
	ignore .bool_set:N = \l_yoin_yoinshell_ignore_bool,
	ignore .initial:n = { false },
%    \end{macrocode}
%    \begin{macrocode}
}
%    \end{macrocode}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{yoinAdd macro --- adding articles to the issue}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% The key--value interface. In this case, we basically only store the keys for each article in a \T{prop}.
%    \begin{macrocode}
\tl_new:N \l__yoin_yoinadd_currentarticle_tl
\seq_new:N \g__yoin_articles_seq
\cs_new:Nn \yoin_article_prop:n {
	g__yoin_yoinadd_article_#1_prop
}
\cs_generate_variant:Nn \yoin_article_prop:n { V }
\cs_new_protected:Nn \yoin_yoinadd_storekey:nn {
	\prop_gput:cnn { \yoin_article_prop:V \l__yoin_yoinadd_currentarticle_tl } { #1 } { #2 }
}
\cs_new_protected:Nn \yoin_yoinadd:nn {
	\seq_gput_right:Nn \g__yoin_articles_seq { #1 }
	\tl_set:Nn \l__yoin_yoinadd_currentarticle_tl
	\prop_new:c { \yoin_yoinadd_prop:n { #1 } }
	\keys_set:nn { yoin / yoinadd } { #2 }
}
\clist_map_inline { tag, forceopenany, forceopenright } {
	\keys_define:nn { yoin / yoinadd } {
		#1 .code:n = { \yoin_yoinadd_storekey { #1 } { ##1 } }
	}
}
%    \end{macrocode}
% ^^A    \begin{macrocode}
% ^^A    \end{macrocode}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{Blablabla}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  \begin{macro}{\bla}
%    \begin{macrocode}

\cs_new:Nn \yoin_blabla: {
	Blabla
}

%    \end{macrocode}
%  \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \Finale